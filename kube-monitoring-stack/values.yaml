grafana:
  adminPassword: password!@#$
  ingress:
    enabled: true
    ingressClassName: traefik
    hosts:
      - grafana.local
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: Prometheus
        type: prometheus
        uid: prometheus
        url: http://k8s-monitoring-prometheus-server.monitoring:80      
        isDefault: true
        editable: true
      - name: Mimir
        type: prometheus
        uid: mimir
        url: http://k8s-monitoring-mimir-nginx.monitoring.svc:80/prometheus
        editable: true
        jsonData:
          timeInterval: 60s
          exemplarTraceIdDestinations:
            - name: trace_id
              datasourceUid: tempo
              urlDisplayLabel: "Trace: $${__value.raw}"
      - name: Loki
        type: loki
        uid: loki
        url: http://k8s-monitoring-k8s-monitoring-loki-gateway
        editable: true
        jsonData:
          derivedFields:
            - name: "trace_id"
              matcherType: "label"
              matcherRegex: "trace_id"
              url: "$${__value.raw}"
              datasourceUid: "tempo"
              urlDisplayLabel: "Trace: $${__value.raw}"
      - name: Tempo
        type: tempo
        uid: tempo
        url: http://k8s-monitoring-k8s-monitoring-tempo:3100
        editable: true
        jsonData:
          tracesToLogsV2:
            customQuery: true
            datasourceUid: "loki"
            query: '{$${__tags}} | trace_id = "$${__trace.traceId}"'
            tags:
              - key: "service.name"
                value: "service_name"
          serviceMap:
            datasourceUid: "mimir"
          search:
            hide: false
          nodeGraph:
            enabled: true
          lokiSearch:
            datasourceUid: "loki"

  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'default'
        orgId: 1
        folder: 'default'
        type: file
        disableDeletion: true
        editable: true
        options:
          path: /var/lib/grafana/dashboards/standard
  dashboards:
    default:
      k8s_global:
        gnetId: 15757
        revision: 1
        datasource: Mimir
      k8s_nodes:
        gnetId: 15759
        revision: 1
        datasource: Mimir  
      k8s_namespaces:
        gnetId: 15758
        revision: 1
        datasource: Mimir
      k8s_pods:
        gnetId: 15760
        revision: 1
        datasource: Mimir
prometheus:
  server:
    ingress:
      enabled: true
      ingressClassName: traefik
      hosts:
        - prometheus.local
    remoteWrite:
      - url: http://k8s-monitoring-mimir-nginx.monitoring.svc:80/api/v1/push
    global:
      external_labels:
        cluster: kw-local

mimir-distributed:
  mimir:
    structuredConfig:
      limits:
        max_cache_freshness: 10m
        max_query_parallelism: 240
        max_total_query_length: 12000h
        max_global_exemplars_per_user: 100000
  minio:
    consoleIngress:
      enabled: true
      ingressClassName: traefik
      hosts:
        - minio.local
    buckets: 
      - name: chunks
        policy: none
        purge: false
        versioning: false
        objectlocking: false
      - name: ruler
        policy: none
        purge: false
        versioning: false
        objectlocking: false
      - name: admin
        policy: none
        purge: false
        versioning: false
        objectlocking: false
      - name: tempo-store
        policy: none
        purge: false
        versioning: false
        objectlocking: false
      - name: mimir-tsdb
        policy: none
        purge: false
      - name: mimir-ruler
        policy: none
        purge: false
      - name: enterprise-metrics-tsdb
        policy: none
        purge: false
      - name: enterprise-metrics-admin
        policy: none
        purge: false
      - name: enterprise-metrics-ruler
        policy: none
        purge: false

tempo:
  nameOverride: "k8s-monitoring-tempo"
  tempo:
    metricsGenerator:
      enabled: true
      remoteWriteUrl: "http://k8s-monitoring-mimir-nginx.monitoring.svc:80/api/v1/push"
    storage:
      trace:
        backend: s3
        s3:
          bucket: tempo-store
          endpoint: "k8s-monitoring-minio:9000"  
          access_key: console                   
          secret_key: console123               
          insecure: true
          forcepathstyle: true                

  config: |
      memberlist:
        cluster_label: "{{ .Release.Name }}.{{ .Release.Namespace }}"
      multitenancy_enabled: {{ .Values.tempo.multitenancyEnabled }}
      usage_report:
        reporting_enabled: {{ .Values.tempo.reportingEnabled }}
      compactor:
        compaction:
          block_retention: {{ .Values.tempo.retention }}
      distributor:
        receivers:
          {{- toYaml .Values.tempo.receivers | nindent 8 }}
      ingester:
        {{- toYaml .Values.tempo.ingester | nindent 6 }}
      server:
        {{- toYaml .Values.tempo.server | nindent 6 }}
      storage:
        {{- toYaml .Values.tempo.storage | nindent 6 }}
      querier:
        {{- toYaml .Values.tempo.querier | nindent 6 }}
      query_frontend:
        {{- toYaml .Values.tempo.queryFrontend | nindent 6 }}
      overrides:
        {{- toYaml .Values.tempo.global_overrides | nindent 6 }}
        {{- if .Values.tempo.metricsGenerator.enabled }}
            metrics_generator_processors:
            - 'service-graphs'
            - 'local-blocks'
            - 'span-metrics'
      metrics_generator:
            processor:
              local_blocks:
                filter_server_spans: false
              span_metrics:
                dimensions:
                  - service_name
                  - operation
                  - status_code
            traces_storage:
              path: /tmp/tempo/generator/traces
            storage:
              path: "/tmp/tempo/generator/wal"
              remote_write:
                - url: {{ .Values.tempo.metricsGenerator.remoteWriteUrl }}
                  send_exemplars: true
        {{- end }}

opentelemetry-collector:
  # Valid values are "daemonset", "deployment", and "statefulset".
  mode: "deployment"
  presets:
    kubernetesEvents:
      enabled: true
  config:
    exporters:
      debug:
        verbosity: detailed
      otlphttp:
        endpoint: http://k8s-monitoring-mimir-nginx.monitoring.svc:80/otlp
      otlphttp/loki:
        endpoint: http://k8s-monitoring-k8s-monitoring-loki-gateway.monitoring.svc:80/otlp
      otlphttp/traces:
        endpoint: http://k8s-monitoring-k8s-monitoring-tempo.monitoring.svc:4318
    processors:
      batch: {}
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:4317
          http:
            endpoint: ${env:MY_POD_IP}:4318
      prometheus:
        config:
          scrape_configs:
            - job_name: opentelemetry-collector
              scrape_interval: 10s
              static_configs:
                - targets:
                    - ${env:MY_POD_IP}:8888
    service:
      telemetry:
        metrics:
          address: ${env:MY_POD_IP}:8888
      extensions:
        - health_check
      pipelines:
        logs:
          exporters:
            - debug
            - otlphttp/loki
          processors:
            - memory_limiter
            - batch
          receivers:
            - otlp
        metrics:
          exporters:
            - debug
            - otlphttp
          processors:
            - memory_limiter
            - batch
          receivers:
            - otlp
            - prometheus
        traces:
          exporters:
            - debug
            - otlphttp/traces
          processors:
            - memory_limiter
            - batch
          receivers:
            - otlp

  image:
    # If you want to use the core image `otel/opentelemetry-collector`, you also need to change `command.name` value to `otelcol`.
    repository: "otel/opentelemetry-collector-k8s"

loki:
  nameOverride: "k8s-monitoring-loki"
  deploymentMode: SimpleScalable
  loki:
    auth_enabled: false
    useTestSchema: true
    storage:
      bucketNames:
        chunks: chunks
        ruler: ruler
        admin: admin
      type: s3
      s3:
        s3ForcePathStyle: true
        insecure: true
  backend:
    replicas: 1
  read:
    replicas: 1
  write:
    replicas: 3
  chunksCache:
    enabled: false
